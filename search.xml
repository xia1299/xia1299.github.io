<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用官方源码maven编译Apace Ranger]]></title>
    <url>%2F2019%2F03%2F26%2Fmaven-repositories%2F</url>
    <content type="text"><![CDATA[前言今天，由于项目的需要，正在研究Apace Ranger用于Apache Hadoop生态的授权控制。由于之前对于maven的了解仅仅局限于mvn clean install,所以今天也算吃了大亏！鉴于有所领悟，所以干脆就写文章记录了下来。本来想水一下今天的坑事，但是发现这错误太低级，还是直接就阐述步骤吧。 编译环境由于公司的开发环境的linux不能连外网，所以我这里采用的是在Windows环境下进行编译： 环境 版本 备注 JDK 1.8.0_172 官网的教程写的是1.7，但是源码里面其实已经依赖1.8，所以最好用1.8 MAVEN apache-maven-3.5.4 这里去官网下载程序，解压就可以了 IDEA 2018.3 对于编译打包来说，这个不是必须的 Python 2.7.16 这个我原来也没有，编译打包过程中 ranger util这个module需要运行python，所以后来安装的。也没有试验过，Python3行不行 git version 2.20.1.windows.1 这个是用来下载源码的，也不是必须的，可以直接通过官网下载 配置环境 首先，我们需要确保JDK 和 MAVEN 和 git都配置环境变量和PATH.保证命令不受目录限制。 配置MAVEN的设置文件setting.xml(位于maven目录的conf路径下) 配置localRepository如果你是第一使用mav，将本地仓库指定为自定义的目录。比如， 1&lt;localRepository&gt;D:\mvnrepository&lt;/localRepository&gt; 配置maven远程仓库镜像由于国内访问maven的官方库比较慢，所以通常我们可以设置国内阿里云的镜像。比如： 12345678910111213141516171819202122232425 &lt;mirrors&gt; &lt;!-- mirror的id和name属性可以所以定义 --&gt; &lt;!-- url对应为阿里云的资源地址 --&gt; &lt;!-- mirrorOf这个属性非常重要，它指明了这是对应于官方的哪个库，必须跟官方或者POM文件中的对应--&gt; &lt;!-- 这个对应的是网上经常提到的中央库 central --&gt; &lt;mirror&gt; &lt;id&gt;alimaven1&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;!--对应于public库 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven1&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;apache.public.https&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;!-- 对应于snapshots库 --&gt; &lt;mirror&gt; &lt;id&gt;nexus-public-snapshots&lt;/id&gt; &lt;mirrorOf&gt;apache.snapshots.https&lt;/mirrorOf&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/snapshots/&lt;/url&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 或者，你也可以试一下以下配置 12345678 &lt;mirrors&gt; &lt;!-- 这个*表示配置所有的库 --&gt; &lt;mirror&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/&lt;/url&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 因为我之前不熟悉maven，导致我在这里配置镜像的时候没有正确的配置mirrorOf这个属性，所以导致打包的过程依然很慢。（网上很多教程都是直接将mirrorOf配置为central,而之前自己又不求甚解，导致吃了大亏，浪费了很多时间！所以这也提醒我，以后最好去阅读官方的说明文档，老话说就是磨刀不误砍柴功。） 进行编译经过以上的步骤，我们已经可以进行Apace Ranger的编译了。我们直接进入源码的根目录，然后通过以下命令进行编译：1mvn clean compile package assembly:assembly -DskipTests 我这里比官方教程的多了一个-DskipTests是因为我在IDEA中进行编译时，maven测试会报错。最后，经过大概20分钟的编译打包过程，最终成功编译了！kimoji! 配置IDEA全局的maven环境最后说一下题外话：配置IDEA全局的maven环境，如果我们下载的maven没有放到IDEA默认的maven目录下，或者名字没有修改，往往我们都需要在新建项目时指定项目的maven环境。设置路径为：File -&gt; Setting -&gt; Setting for New Projects(旧版本可能是Default setting) -&gt; Build Exu Delp -&gt; Build Tools -&gt; Maven。将右边的 maven home directory 设置为 maven的安装目录 user setting file 设置为 maven安装目录下/conf/setting.xml Local reposity 设置为 setting.xml文件中指定的值。（如果在setting文件中已经设置了localRepository，该属性会自动填充）]]></content>
      <categories>
        <category>Ranger</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo（node）+github创建自己的Bolg网站]]></title>
    <url>%2F2019%2F03%2F20%2FFirst-Start%2F</url>
    <content type="text"><![CDATA[前言现在网上已经有很多关于如何使用Hexo+GitHub建立个人Blog网站的博客了，但是我还是决定自己写一篇，因为我想练练手！（哇哈哈哈）！由于MarkDown是第一次用，可能会很丑，不过也算是一个开端吧。 0.准备工作如题所言，需要建立个人博客，需要做如下的准备：软件1. 安装Nodejs(因为Hexo是基于Nodejs的)Windows安装 Nodejs 非常简单，我们只需要访问他的官网，然后下载安装就可以了。 2. 安装GitWindows安装 Git,同样也是点击式安装。Git网站可能访问会比较慢，可以通过代理或者其他途径下载软件。账户确保自己有一个 github 的账户，没有的话就去申请一个！ 1.安装Hexo接下来，我们通过Nodejs来安装Hexo。1$ npm install -g hexo-cl 2.配置Github秘钥SSH Key创建Blog存亡的库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 。生成SSH Key在命令行输入以下命令，其中“邮件地址”为你注册gitbub的email。1ssh-keygen -t rsa -C "邮件地址" 最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key。此外，你还需要为git配置你的github的账户和密码12$ git config --global user.name "test"// 你的github用户名，非昵称$ git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 3.新建自己的小站使用命令在本地新建网站目录123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 4.更换主题Hexo默认的主题为landscape。如果你不喜欢，可以通过下载主题，然后放到上文的themes文件夹下。然后通过修改上文的_config.yml文件的theme配置,将其替换为主题文件的名字。1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next ##替换为themes下，主题目录的名字，默认为landscape 5.发布Bolg首先，我们需要安装hexo-deployer-git1$ npm install hexo-deployer-git --save 其次，我们需要为网站在_config.yml文件配置部署的配置。123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://test.github.io ##这里配置为你的网站的地址root: /permalink: :year/:month/:day/:title/permalink_defaults: 以及：123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #配置部署方式为git repo: https://github.com/test/test.github.io.git #配置你的仓库URL branch: master #配置仓库的分支 需要注意的是，yaml文件的配置，冒号后面需要跟空格，如果发现你的配置没有生效，请检查配置是否保存，或者格式是否正确。最后，我们通过两个命令就可以将自己的网站发布到github，并通过https://test.github.io来进行访问了。第一步是生成网站的静态文件：123$ hexo generate#或者直接采用缩写$ hexo g 第二步是部署文件到gitbub仓库：123$ hexo deploy#或者直接$ hexo d 这下，我们就可以愉快的访问自己的个人Blog了。此外，如果我们修改了网站，马上去看发现没有生效，确认静态文件又是正确，什么原因呢？有一个原因就是没有清空浏览器的缓存，我们需要到浏览器的设置里面进行清理。如果你用的的Chrome，可以通过快捷键 Ctrl+ Shift+Del键进行清理！Have Fun!!!!]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
